// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SMByteArrayHeader.proto

#ifndef PROTOBUF_SMByteArrayHeader_2eproto__INCLUDED
#define PROTOBUF_SMByteArrayHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SMByteArrayHeader_2eproto();
void protobuf_AssignDesc_SMByteArrayHeader_2eproto();
void protobuf_ShutdownFile_SMByteArrayHeader_2eproto();

class ByteArrayHeader;

// ===================================================================

class ByteArrayHeader : public ::google::protobuf::Message {
 public:
  ByteArrayHeader();
  virtual ~ByteArrayHeader();

  ByteArrayHeader(const ByteArrayHeader& from);

  inline ByteArrayHeader& operator=(const ByteArrayHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ByteArrayHeader& default_instance();

  void Swap(ByteArrayHeader* other);

  // implements Message ----------------------------------------------

  ByteArrayHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ByteArrayHeader& from);
  void MergeFrom(const ByteArrayHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string datasource = 1;
  inline bool has_datasource() const;
  inline void clear_datasource();
  static const int kDatasourceFieldNumber = 1;
  inline const ::std::string& datasource() const;
  inline void set_datasource(const ::std::string& value);
  inline void set_datasource(const char* value);
  inline void set_datasource(const char* value, size_t size);
  inline ::std::string* mutable_datasource();
  inline ::std::string* release_datasource();
  inline void set_allocated_datasource(::std::string* datasource);

  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required int64 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // required int64 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ByteArrayHeader)
 private:
  inline void set_has_datasource();
  inline void clear_has_datasource();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datasource_;
  ::std::string* filename_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int64 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SMByteArrayHeader_2eproto();
  friend void protobuf_AssignDesc_SMByteArrayHeader_2eproto();
  friend void protobuf_ShutdownFile_SMByteArrayHeader_2eproto();

  void InitAsDefaultInstance();
  static ByteArrayHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// ByteArrayHeader

// required string datasource = 1;
inline bool ByteArrayHeader::has_datasource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ByteArrayHeader::set_has_datasource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ByteArrayHeader::clear_has_datasource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ByteArrayHeader::clear_datasource() {
  if (datasource_ != &::google::protobuf::internal::kEmptyString) {
    datasource_->clear();
  }
  clear_has_datasource();
}
inline const ::std::string& ByteArrayHeader::datasource() const {
  return *datasource_;
}
inline void ByteArrayHeader::set_datasource(const ::std::string& value) {
  set_has_datasource();
  if (datasource_ == &::google::protobuf::internal::kEmptyString) {
    datasource_ = new ::std::string;
  }
  datasource_->assign(value);
}
inline void ByteArrayHeader::set_datasource(const char* value) {
  set_has_datasource();
  if (datasource_ == &::google::protobuf::internal::kEmptyString) {
    datasource_ = new ::std::string;
  }
  datasource_->assign(value);
}
inline void ByteArrayHeader::set_datasource(const char* value, size_t size) {
  set_has_datasource();
  if (datasource_ == &::google::protobuf::internal::kEmptyString) {
    datasource_ = new ::std::string;
  }
  datasource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ByteArrayHeader::mutable_datasource() {
  set_has_datasource();
  if (datasource_ == &::google::protobuf::internal::kEmptyString) {
    datasource_ = new ::std::string;
  }
  return datasource_;
}
inline ::std::string* ByteArrayHeader::release_datasource() {
  clear_has_datasource();
  if (datasource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datasource_;
    datasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ByteArrayHeader::set_allocated_datasource(::std::string* datasource) {
  if (datasource_ != &::google::protobuf::internal::kEmptyString) {
    delete datasource_;
  }
  if (datasource) {
    set_has_datasource();
    datasource_ = datasource;
  } else {
    clear_has_datasource();
    datasource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string filename = 2;
inline bool ByteArrayHeader::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ByteArrayHeader::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ByteArrayHeader::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ByteArrayHeader::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ByteArrayHeader::filename() const {
  return *filename_;
}
inline void ByteArrayHeader::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ByteArrayHeader::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ByteArrayHeader::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ByteArrayHeader::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* ByteArrayHeader::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ByteArrayHeader::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 offset = 3;
inline bool ByteArrayHeader::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ByteArrayHeader::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ByteArrayHeader::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ByteArrayHeader::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 ByteArrayHeader::offset() const {
  return offset_;
}
inline void ByteArrayHeader::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// required int64 size = 4;
inline bool ByteArrayHeader::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ByteArrayHeader::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ByteArrayHeader::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ByteArrayHeader::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 ByteArrayHeader::size() const {
  return size_;
}
inline void ByteArrayHeader::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SMByteArrayHeader_2eproto__INCLUDED
