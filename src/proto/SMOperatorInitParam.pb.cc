// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SMOperatorInitParam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SMOperatorInitParam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchRequest_DataSourceImplType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchRequest_ReadPreferenceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GeneralKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SMOperatorInitParam_2eproto() {
  protobuf_AddDesc_SMOperatorInitParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SMOperatorInitParam.proto");
  GOOGLE_CHECK(file != NULL);
  SearchRequest_descriptor_ = file->message_type(0);
  static const int SearchRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, sourcename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, datasourceimpltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, readpreferencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, generalkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, partitionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, timelimitmin_),
  };
  SearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchRequest));
  SearchRequest_DataSourceImplType_descriptor_ = SearchRequest_descriptor_->enum_type(0);
  SearchRequest_ReadPreferenceType_descriptor_ = SearchRequest_descriptor_->enum_type(1);
  GeneralKey_descriptor_ = file->message_type(1);
  static const int GeneralKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralKey, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralKey, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralKey, last_),
  };
  GeneralKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralKey_descriptor_,
      GeneralKey::default_instance_,
      GeneralKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralKey));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SMOperatorInitParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralKey_descriptor_, &GeneralKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SMOperatorInitParam_2eproto() {
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete GeneralKey::default_instance_;
  delete GeneralKey_reflection_;
}

void protobuf_AddDesc_SMOperatorInitParam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031SMOperatorInitParam.proto\"\207\003\n\rSearchRe"
    "quest\022\014\n\004host\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\022\022\n\nsou"
    "rceName\030\003 \001(\t\022=\n\022dataSourceImplType\030\004 \002("
    "\0162!.SearchRequest.DataSourceImplType\022=\n\022"
    "readPreferenceType\030\005 \002(\0162!.SearchRequest"
    ".ReadPreferenceType\022 \n\013generalKeys\030\006 \003(\013"
    "2\013.GeneralKey\022\024\n\014partitionKey\030\007 \001(\005\022\024\n\014t"
    "imeLimitMin\030\010 \001(\005\"D\n\022DataSourceImplType\022"
    "\r\n\tREAL_TIME\020\000\022\020\n\014MONGO_GRIDFS\020\001\022\r\n\tHADO"
    "OPDFS\020\002\"4\n\022ReadPreferenceType\022\014\n\010READ_AL"
    "L\020\000\022\020\n\014LIST_OF_KEYS\020\001\"7\n\nGeneralKey\022\014\n\004n"
    "ame\030\001 \002(\t\022\r\n\005first\030\002 \001(\003\022\014\n\004last\030\003 \001(\003", 478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SMOperatorInitParam.proto", &protobuf_RegisterTypes);
  SearchRequest::default_instance_ = new SearchRequest();
  GeneralKey::default_instance_ = new GeneralKey();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  GeneralKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SMOperatorInitParam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SMOperatorInitParam_2eproto {
  StaticDescriptorInitializer_SMOperatorInitParam_2eproto() {
    protobuf_AddDesc_SMOperatorInitParam_2eproto();
  }
} static_descriptor_initializer_SMOperatorInitParam_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchRequest_DataSourceImplType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_DataSourceImplType_descriptor_;
}
bool SearchRequest_DataSourceImplType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchRequest_DataSourceImplType SearchRequest::REAL_TIME;
const SearchRequest_DataSourceImplType SearchRequest::MONGO_GRIDFS;
const SearchRequest_DataSourceImplType SearchRequest::HADOOPDFS;
const SearchRequest_DataSourceImplType SearchRequest::DataSourceImplType_MIN;
const SearchRequest_DataSourceImplType SearchRequest::DataSourceImplType_MAX;
const int SearchRequest::DataSourceImplType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SearchRequest_ReadPreferenceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_ReadPreferenceType_descriptor_;
}
bool SearchRequest_ReadPreferenceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchRequest_ReadPreferenceType SearchRequest::READ_ALL;
const SearchRequest_ReadPreferenceType SearchRequest::LIST_OF_KEYS;
const SearchRequest_ReadPreferenceType SearchRequest::ReadPreferenceType_MIN;
const SearchRequest_ReadPreferenceType SearchRequest::ReadPreferenceType_MAX;
const int SearchRequest::ReadPreferenceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SearchRequest::kHostFieldNumber;
const int SearchRequest::kPortFieldNumber;
const int SearchRequest::kSourceNameFieldNumber;
const int SearchRequest::kDataSourceImplTypeFieldNumber;
const int SearchRequest::kReadPreferenceTypeFieldNumber;
const int SearchRequest::kGeneralKeysFieldNumber;
const int SearchRequest::kPartitionKeyFieldNumber;
const int SearchRequest::kTimeLimitMinFieldNumber;
#endif  // !_MSC_VER

SearchRequest::SearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchRequest::InitAsDefaultInstance() {
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchRequest::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasourceimpltype_ = 0;
  readpreferencetype_ = 0;
  partitionkey_ = 0;
  timelimitmin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchRequest::~SearchRequest() {
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (sourcename_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcename_;
  }
  if (this != default_instance_) {
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SMOperatorInitParam_2eproto();
  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New() const {
  return new SearchRequest;
}

void SearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
    if (has_sourcename()) {
      if (sourcename_ != &::google::protobuf::internal::kEmptyString) {
        sourcename_->clear();
      }
    }
    datasourceimpltype_ = 0;
    readpreferencetype_ = 0;
    partitionkey_ = 0;
    timelimitmin_ = 0;
  }
  generalkeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sourceName;
        break;
      }

      // optional string sourceName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcename().data(), this->sourcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataSourceImplType;
        break;
      }

      // required .SearchRequest.DataSourceImplType dataSourceImplType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSourceImplType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SearchRequest_DataSourceImplType_IsValid(value)) {
            set_datasourceimpltype(static_cast< ::SearchRequest_DataSourceImplType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_readPreferenceType;
        break;
      }

      // required .SearchRequest.ReadPreferenceType readPreferenceType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readPreferenceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SearchRequest_ReadPreferenceType_IsValid(value)) {
            set_readpreferencetype(static_cast< ::SearchRequest_ReadPreferenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_generalKeys;
        break;
      }

      // repeated .GeneralKey generalKeys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generalKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_generalkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_generalKeys;
        if (input->ExpectTag(56)) goto parse_partitionKey;
        break;
      }

      // optional int32 partitionKey = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partitionKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionkey_)));
          set_has_partitionkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timeLimitMin;
        break;
      }

      // optional int32 timeLimitMin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeLimitMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelimitmin_)));
          set_has_timelimitmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string sourceName = 3;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sourcename(), output);
  }

  // required .SearchRequest.DataSourceImplType dataSourceImplType = 4;
  if (has_datasourceimpltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datasourceimpltype(), output);
  }

  // required .SearchRequest.ReadPreferenceType readPreferenceType = 5;
  if (has_readpreferencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->readpreferencetype(), output);
  }

  // repeated .GeneralKey generalKeys = 6;
  for (int i = 0; i < this->generalkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->generalkeys(i), output);
  }

  // optional int32 partitionKey = 7;
  if (has_partitionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->partitionkey(), output);
  }

  // optional int32 timeLimitMin = 8;
  if (has_timelimitmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timelimitmin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string sourceName = 3;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sourcename(), target);
  }

  // required .SearchRequest.DataSourceImplType dataSourceImplType = 4;
  if (has_datasourceimpltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datasourceimpltype(), target);
  }

  // required .SearchRequest.ReadPreferenceType readPreferenceType = 5;
  if (has_readpreferencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->readpreferencetype(), target);
  }

  // repeated .GeneralKey generalKeys = 6;
  for (int i = 0; i < this->generalkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->generalkeys(i), target);
  }

  // optional int32 partitionKey = 7;
  if (has_partitionkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->partitionkey(), target);
  }

  // optional int32 timeLimitMin = 8;
  if (has_timelimitmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timelimitmin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string sourceName = 3;
    if (has_sourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcename());
    }

    // required .SearchRequest.DataSourceImplType dataSourceImplType = 4;
    if (has_datasourceimpltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasourceimpltype());
    }

    // required .SearchRequest.ReadPreferenceType readPreferenceType = 5;
    if (has_readpreferencetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->readpreferencetype());
    }

    // optional int32 partitionKey = 7;
    if (has_partitionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partitionkey());
    }

    // optional int32 timeLimitMin = 8;
    if (has_timelimitmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timelimitmin());
    }

  }
  // repeated .GeneralKey generalKeys = 6;
  total_size += 1 * this->generalkeys_size();
  for (int i = 0; i < this->generalkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generalkeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  generalkeys_.MergeFrom(from.generalkeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_sourcename()) {
      set_sourcename(from.sourcename());
    }
    if (from.has_datasourceimpltype()) {
      set_datasourceimpltype(from.datasourceimpltype());
    }
    if (from.has_readpreferencetype()) {
      set_readpreferencetype(from.readpreferencetype());
    }
    if (from.has_partitionkey()) {
      set_partitionkey(from.partitionkey());
    }
    if (from.has_timelimitmin()) {
      set_timelimitmin(from.timelimitmin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  for (int i = 0; i < generalkeys_size(); i++) {
    if (!this->generalkeys(i).IsInitialized()) return false;
  }
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(sourcename_, other->sourcename_);
    std::swap(datasourceimpltype_, other->datasourceimpltype_);
    std::swap(readpreferencetype_, other->readpreferencetype_);
    generalkeys_.Swap(&other->generalkeys_);
    std::swap(partitionkey_, other->partitionkey_);
    std::swap(timelimitmin_, other->timelimitmin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeneralKey::kNameFieldNumber;
const int GeneralKey::kFirstFieldNumber;
const int GeneralKey::kLastFieldNumber;
#endif  // !_MSC_VER

GeneralKey::GeneralKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeneralKey::InitAsDefaultInstance() {
}

GeneralKey::GeneralKey(const GeneralKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeneralKey::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  first_ = GOOGLE_LONGLONG(0);
  last_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralKey::~GeneralKey() {
  SharedDtor();
}

void GeneralKey::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GeneralKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralKey_descriptor_;
}

const GeneralKey& GeneralKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SMOperatorInitParam_2eproto();
  return *default_instance_;
}

GeneralKey* GeneralKey::default_instance_ = NULL;

GeneralKey* GeneralKey::New() const {
  return new GeneralKey;
}

void GeneralKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    first_ = GOOGLE_LONGLONG(0);
    last_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first;
        break;
      }

      // optional int64 first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last;
        break;
      }

      // optional int64 last = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int64 first = 2;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->first(), output);
  }

  // optional int64 last = 3;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeneralKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 first = 2;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->first(), target);
  }

  // optional int64 last = 3;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeneralKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 first = 2;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first());
    }

    // optional int64 last = 3;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralKey::MergeFrom(const GeneralKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralKey::CopyFrom(const GeneralKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GeneralKey::Swap(GeneralKey* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(first_, other->first_);
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeneralKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralKey_descriptor_;
  metadata.reflection = GeneralKey_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
